---
- name: Check if EPEL repo is already configured
  stat: path={{ epel_repofile_path }}
  register: epel_repofile_result
  tags:
    - installEPEL

- name: Install EPEL repo
  yum:
    name: "{{ epel_repo_url }}"
    state: present
  register: result
  when: not epel_repofile_result.stat.exists
  tags:
    - installEPEL

- name: Import EPEL GPG key
  rpm_key:
    key: "{{ epel_repo_gpg_key_url }}"
    state: present
  when: not epel_repofile_result.stat.exists
  tags:
    - installEPEL

- name: Install OpenVPN
  yum:
    name: ["openvpn", "NetworkManager-openvpn"]
    state: latest
  tags:
    - installPackages
    - installOpenVPN

## Root CA & General PKI

- name: ROOT CA - Create PKI Directories
  shell:
    cmd: "mkdir -p {{ pki_certificate_authority_root_path }}/{certreqs,certs,crl,newcerts,private,intermed-ca} && chmod 700 {{ pki_certificate_authority_root_path }}/private"
    warn: false

- name: ROOT CA - Create initial crlnum index
  shell:
    cmd: "echo 00 > {{ pki_certificate_authority_root_path }}/root-ca.crlnum"
    creates: "{{ pki_certificate_authority_root_path }}/root-ca.crlnum"

- name: ROOT CA - Create initial index
  file:
    path: "{{ pki_certificate_authority_root_path }}/root-ca.index"
    state: touch

- name: ROOT CA - Create initial serial index
  shell:
    cmd: "openssl rand -hex 16 > {{ pki_certificate_authority_root_path }}/root-ca.serial"
    creates: "{{ pki_certificate_authority_root_path }}/root-ca.serial"

- name: ROOT CA - Template Root CA Configuration File
  template:
    src: openvpn-root-ca.cnf.j2
    dest: "{{ pki_certificate_authority_root_path }}/root-ca.cnf"
    backup: yes

- name: ROOT CA - Generate Certificate Authority Private Key
  shell:
    #cmd: "cd {{ pki_certificate_authority_root_path }} && openssl req -new -batch -nodes -out private/root-ca.key.pem"
    cmd: "cd {{ pki_certificate_authority_root_path }} && openssl genrsa -out private/root-ca.key.pem 4096"
    creates: "{{ pki_certificate_authority_root_path }}/private/root-ca.key.pem"
  environment:
    OPENSSL_CONF: "{{ pki_certificate_authority_root_path }}/root-ca.cnf"

- name: ROOT CA - Protect CA Root Key
  file:
    mode: "400"
    path: "{{ pki_certificate_authority_root_path }}/private/root-ca.key.pem"

- name: ROOT CA - Generate Certificate Authority CSR
  shell:
    cmd: "cd {{ pki_certificate_authority_root_path }} && openssl req -new -batch -out certreqs/root-ca.req.pem -key private/root-ca.key.pem"
    creates: "{{ pki_certificate_authority_root_path }}/certreqs/root-ca.req.pem"
  environment:
    OPENSSL_CONF: "{{ pki_certificate_authority_root_path }}/root-ca.cnf"

- name: ROOT CA - Create CA Certificate
  shell:
    cmd: "cd {{ pki_certificate_authority_root_path }} && openssl ca -selfsign -batch -in certreqs/root-ca.req.pem -out root-ca.cert.pem -extensions root-ca_ext -startdate `date +%y%m%d000000Z -u -d -1day` -enddate `date +%y%m%d000000Z -u -d {{ pki_certificate_authority_root_ca_expiration }}`"
    creates: "{{ pki_certificate_authority_root_path }}/root-ca.cert.pem"
  environment:
    OPENSSL_CONF: "{{ pki_certificate_authority_root_path }}/root-ca.cnf"

- name: ROOT CA - Create CA CRL
  shell:
    cmd: "cd {{ pki_certificate_authority_root_path }} && openssl ca -gencrl -out crl/root-ca.crl"
    creates: "{{ pki_certificate_authority_root_path }}/crl/root-ca.crl"
  environment:
    OPENSSL_CONF: "{{ pki_certificate_authority_root_path }}/root-ca.cnf"

- name: ROOT CA - Install Root CA as trusted CA
  copy:
    backup: yes
    dest: "/etc/pki/ca-trust/source/anchors/{{ system_domain }}.crt"
    src: "{{ pki_certificate_authority_root_path }}/root-ca.cert.pem"
    remote_src: yes
  notify: update-ca-trust

## OpenVPN Server Intermediate CA

- name: OpenVPN Intermediary CA - Create PKI Directories
  shell:
    cmd: "mkdir -p {{ openvpn_certificate_root_path }}/{certreqs,certs,crl,newcerts,private} && chmod 700 {{ openvpn_certificate_root_path }}/private"
    warn: false

- name: OpenVPN Intermediary CA - Create initial crlnum index
  shell:
    cmd: "echo 00 > {{ openvpn_certificate_root_path }}/intermed-ca.crlnum"
    creates: "{{ openvpn_certificate_root_path }}/intermed-ca.crlnum"

- name: OpenVPN Intermediary CA - Create initial index
  file:
    path: "{{ openvpn_certificate_root_path }}/intermed-ca.index"
    state: touch

- name: OpenVPN Intermediary CA - Create initial serial index
  shell:
    cmd: "openssl rand -hex 16 > {{ openvpn_certificate_root_path }}/intermed-ca.serial"
    creates: "{{ openvpn_certificate_root_path }}/intermed-ca.serial"

- name: OpenVPN Intermediary CA - Template Root CA Configuration File
  template:
    src: openvpn-intermed-ca.cnf.j2
    dest: "{{ openvpn_certificate_root_path }}/intermed-ca.cnf"
    backup: yes

- name: OpenVPN Intermediary CA - Generate Certificate Authority Private Key
  shell:
    cmd: "cd {{ openvpn_certificate_root_path }} && openssl genrsa -out private/intermed-ca.key.pem 4096"
    creates: "{{ openvpn_certificate_root_path }}/private/intermed-ca.key.pem"
  environment:
    OPENSSL_CONF: "{{ openvpn_certificate_root_path }}/intermed-ca.cnf"

- name: OpenVPN Intermediary CA - Protect CA Root Key
  file:
    mode: "400"
    path: "{{ openvpn_certificate_root_path }}/private/intermed-ca.key.pem"

- name: OpenVPN Intermediary CA - Generate Certificate Authority CSR
  shell:
    cmd: "cd {{ openvpn_certificate_root_path }} && openssl req -new -batch -out certreqs/intermed-ca.req.pem -key private/intermed-ca.key.pem"
    creates: "{{ openvpn_certificate_root_path }}/certreqs/intermed-ca.req.pem"
  environment:
    OPENSSL_CONF: "{{ openvpn_certificate_root_path }}/intermed-ca.cnf"

- name: OpenVPN Intermediary CA - Sign Intermediate CA Certificate with Root CA lol
  shell:
    cmd: "cd {{ pki_certificate_authority_root_path }} && openssl ca -batch -in {{ openvpn_certificate_root_path }}/certreqs/intermed-ca.req.pem -out intermed-ca.cert.pem -extensions intermed-ca_ext -startdate `date +%y%m%d000000Z -u -d -1day` -enddate `date +%y%m%d000000Z -u -d {{ openvpn_server_ca_expiration }}`"
    creates: "{{ pki_certificate_authority_root_path }}/intermed-ca.cert.pem"
  environment:
    OPENSSL_CONF: "{{ pki_certificate_authority_root_path }}/root-ca.cnf"

- name: OpenVPN Intermediary CA - Copy Signed Certificate to Intermediate Directory
  copy:
    backup: yes
    remote_src: yes
    src: "{{ pki_certificate_authority_root_path }}/intermed-ca.cert.pem"
    dest: "{{ openvpn_certificate_root_path }}/intermed-ca.cert.pem"

- name: OpenVPN Intermediary CA - Create CA CRL
  shell:
    cmd: "cd {{ openvpn_certificate_root_path }} && openssl ca -gencrl -out crl/intermed-ca.crl"
    creates: "{{ openvpn_certificate_root_path }}/crl/intermed-ca.crl"
  environment:
    OPENSSL_CONF: "{{ openvpn_certificate_root_path }}/intermed-ca.cnf"
# Don't think we actually need to do this since we have the Root CA installed...
#- name: OpenVPN Intermediary CA - Install Root CA as trusted CA
#  copy:
#    backup: yes
#    dest: "/etc/pki/ca-trust/source/anchors/{{ openvpn_server_ca_slug }}.crt"
#    src: "{{ openvpn_certificate_root_path }}/intermed-ca.cert.pem"
#    remote_src: yes
#  notify: update-ca-trust

## OpenVPN Server Certificate Stuff

- name: OpenVPN Server - Generate Certificate Private Key
  shell:
    cmd: "cd {{ openvpn_certificate_root_path }} && openssl genrsa -out private/openvpn-server.key.pem 4096"
    creates: "{{ openvpn_certificate_root_path }}/private/openvpn-server.key.pem"
  environment:
    OPENSSL_CONF: "{{ openvpn_certificate_root_path }}/intermed-ca.cnf"

- name: OpenVPN Server - Protect Certificate Key
  file:
    mode: "400"
    path: "{{ openvpn_certificate_root_path }}/private/openvpn-server.key.pem"

- name: OpenVPN Server - Generate Server Certificate Key and CSR
  shell:
    cmd: "cd {{ openvpn_certificate_root_path }} &&  openssl req -new -batch -out certreqs/openvpn-server.req.pem -key private/openvpn-server.key.pem"
    creates: "{{ openvpn_certificate_root_path }}/certreqs/openvpn-server.req.pem"
  environment:
    OPENSSL_CONF: "{{ openvpn_certificate_root_path }}/intermed-ca.cnf"

- name: OpenVPN Server - Sign Server Certificate With Intermediate CA
  shell:
    cmd: "cd {{ openvpn_certificate_root_path }} && openssl ca -batch -in certreqs/openvpn-server.req.pem -out certs/openvpn-server.cert.pem -extensions openvpn_server_ext"
    creates: "{{ openvpn_certificate_root_path }}/certs/openvpn-server.cert.pem"
  environment:
    OPENSSL_CONF: "{{ openvpn_certificate_root_path }}/intermed-ca.cnf"

- name: OpenVPN Server - Generate TLS Auth Secret
  shell:
    cmd: "cd {{ openvpn_certificate_root_path }} && openvpn --genkey --secret private/openvpn-server-tls-auth.key.pem"
    creates: "{{ openvpn_certificate_root_path }}/private/openvpn-server-tls-auth.key.pem"
  environment:
    OPENSSL_CONF: "{{ openvpn_certificate_root_path }}/intermed-ca.cnf"

- name: OpenVPN Server - Generate DH Params
  shell:
    cmd: "cd {{ openvpn_certificate_root_path }} && openssl dhparam -out private/openvpn-server-dhparams-{{ openvpn_dh_param_size }}.pem {{ openvpn_dh_param_size }}"
    creates: "{{ openvpn_certificate_root_path }}/private/openvpn-server-dhparams-{{ openvpn_dh_param_size }}.pem"
  environment:
    OPENSSL_CONF: "{{ openvpn_certificate_root_path }}/intermed-ca.cnf"

- name: Template over OpenVPN Server Config
  template:
    src: openvpn-server.conf.j2
    dest: /etc/openvpn/server.conf
    backup: yes
  notify: restart openvpn

- name: Read OpenVPN CA Certificate
  shell: "cat {{ openvpn_certificate_root_path }}/intermed-ca.cert.pem"
  register: openvpn_ca_certificate_stdout

- name: Read OpenVPN TLS Auth Key
  shell: "cat {{ openvpn_certificate_root_path }}/private/openvpn-server-tls-auth.key.pem"
  register: openvpn_tls_auth_certificate_stdout

- name: Template over client config
  template:
    src: openvpn-client.ovpn.j2
    dest: /etc/openvpn/base-client.ovpn
    backup: yes

- name: Start OpenVPN Server
  systemd:
    name: openvpn@server.service
    state: started
    enabled: yes

- name: Install nginx
  yum:
    name: nginx
    state: latest
  when: deploy_ca_http_server|bool
  tags:
    - installPackages
    - installNginx

- name: Create nginx site directory
  shell:
    cmd: "mkdir -p /var/www/{{ pki_certificate_authority_root_ca_slug }}/{certs,crl}"
    warn: false
  when: deploy_ca_http_server|bool

- name: Create a symbolic link for the Root CA Certificate
  file:
    src: "{{ pki_certificate_authority_root_path }}/root-ca.cert.pem"
    dest: "/var/www/{{ pki_certificate_authority_root_ca_slug }}/certs/{{ pki_certificate_authority_root_ca_slug }}_Root_Certification_Authority.cert.pem"
    owner: nginx
    group: nginx
    state: link
  when: deploy_ca_http_server|bool

- name: Create a symbolic link for the Intermediate CA Certificate
  file:
    src: "{{ pki_certificate_authority_root_path }}/intermed-ca.cert.pem"
    dest: "/var/www/{{ pki_certificate_authority_root_ca_slug }}/certs/{{ openvpn_server_ca_slug }}_Intermediate_Certification_Authority.cert.pem"
    owner: nginx
    group: nginx
    state: link
  when: deploy_ca_http_server|bool

- name: Create a symbolic link for the Root CA CRL
  file:
    src: "{{ pki_certificate_authority_root_path }}/crl/root-ca.crl"
    dest: "/var/www/{{ pki_certificate_authority_root_ca_slug }}/crl/{{ pki_certificate_authority_root_ca_slug }}_Root_Certification_Authority.crl"
    owner: nginx
    group: nginx
    state: link
  when: deploy_ca_http_server|bool

- name: Create a symbolic link for the Intermediate CA CRL
  file:
    src: "{{ openvpn_certificate_root_path }}/crl/intermed-ca.crl"
    dest: "/var/www/{{ pki_certificate_authority_root_ca_slug }}/crl/{{ openvpn_server_ca_slug }}_Intermediate_Certification_Authority.crl"
    owner: nginx
    group: nginx
    state: link
  when: deploy_ca_http_server|bool

- name: Create a symbolic link for OpenVPN Base Client Config
  file:
    src: "/etc/openvpn/base-client.ovpn"
    dest: "/var/www/{{ pki_certificate_authority_root_ca_slug }}/openvpn-base-client-config.ovpn"
    owner: nginx
    group: nginx
    state: link
  when: deploy_ca_http_server|bool

- name: Set SELinux Context in the HTML directory
  shell: `semanage fcontext -a -t httpd_sys_content_t /var/www/{{ pki_certificate_authority_root_ca_slug }}(/.*)? && restorecon -Rv /var/www/{{ pki_certificate_authority_root_ca_slug }}`

- name: Template over basic CA HTML Page
  template:
    src: pki-ca-public-webpage.html.j2
    dest: "/var/www/{{ pki_certificate_authority_root_ca_slug }}/index.html"
    backup: yes
  when: deploy_ca_http_server|bool

- name: Create nginx sites-available directory
  file:
    state: directory
    path: /etc/nginx/sites-available
  when: deploy_ca_http_server|bool

- name: Create nginx sites-enabled directory
  file:
    state: directory
    path: /etc/nginx/sites-enabled
  when: deploy_ca_http_server|bool

- name: Template over nginx server config
  template:
    src: pki-ca-nginx-base.conf.j2
    dest: "/etc/nginx/nginx.conf"
    backup: yes
  when: deploy_ca_http_server|bool
  notify: restart nginx

- name: Template over nginx site config
  template:
    src: pki-ca-nginx.conf.j2
    dest: "/etc/nginx/sites-available/{{ pki_certificate_authority_root_ca_slug }}"
    backup: yes
  when: deploy_ca_http_server|bool
  notify: restart nginx

- name: Create symlink to enable site
  file:
    state: link
    src: "/etc/nginx/sites-available/{{ pki_certificate_authority_root_ca_slug }}"
    dest: "/etc/nginx/sites-enabled/{{ pki_certificate_authority_root_ca_slug }}"
  when: deploy_ca_http_server|bool
  notify: restart nginx

- name: Start nginx
  service:
    name: nginx
    state: started
    enabled: yes
  when: deploy_ca_http_server|bool
