---
- name: Check for NetworkManager-glib package
  shell:
    cmd: "rpm -qa | grep NetworkManager-glib"
    warn: false
  register: nmglib_check
  ignore_errors: yes

- name: Check for nm-connection-editor package
  shell:
    cmd: "rpm -qa | grep nm-connection-editor"
    warn: false
  register: nmconedit_check
  ignore_errors: yes

- name: Check for libsemanage-python package
  shell:
    cmd: "rpm -qa | grep libsemanage-python"
    warn: false
  register: libsemanage_check
  ignore_errors: yes

- name: Check for policycoreutils-python package
  shell:
    cmd: "rpm -qa | grep policycoreutils-python"
    warn: false
  register: policycoreutils_check
  ignore_errors: yes

- name: install needed network manager libs
  yum:
    name:
      - NetworkManager-glib
      - nm-connection-editor
      - libsemanage-python
      - policycoreutils-python
    state: latest
  tags:
    - installPackages
    - installNetworkManager
  when: nmglib_check|bool or nmconedit_check|bool libsemanage_check|bool or policycoreutils_check|bool

#### WAN

- name: Check for existing WAN Connection
  stat:
    path: "/etc/sysconfig/network-scripts/ifcfg-wan-{{ wan_interface }}"
  register: wan_interface_check

- name: Create WAN Connection - Static, auto DNS
  nmcli:
    conn_name: "wan-{{ wan_interface }}"
    ifname: "{{ wan_interface }}"
    type: ethernet
    ip4: "{{ wan_ip_address }}/{{ wan_cidr }}"
    gw4: "{{ wan_gateway }}"
    state: present
    autoconnect: yes
  when: enable_wan_interface|bool and configure_wan_interface|bool and wan_network_type == "static" and wan_dns == "auto"

- name: Create WAN Connection - Static, manual DNS
  nmcli:
    conn_name: "wan-{{ wan_interface }}"
    ifname: "{{ wan_interface }}"
    type: ethernet
    ip4: "{{ wan_ip_address }}/{{ wan_cidr }}"
    gw4: "{{ wan_gateway }}"
    dns4: "{{ wan_dns_servers }}"
    state: present
    autoconnect: yes
  when: enable_wan_interface|bool and configure_wan_interface|bool and wan_network_type == "static" and wan_dns == "manual"

- name: Create WAN Connection - DHCP, auto DNS
  nmcli:
    conn_name: "wan-{{ wan_interface }}"
    ifname: "{{ wan_interface }}"
    type: ethernet
    state: present
    autoconnect: yes
  when: enable_wan_interface|bool and configure_wan_interface|bool and wan_network_type == "dhcp" and wan_dns == "auto"

- name: Create WAN Connection - DHCP, manual DNS
  nmcli:
    conn_name: "wan-{{ wan_interface }}"
    ifname: "{{ wan_interface }}"
    type: ethernet
    dns4: "{{ wan_dns_servers }}"
    state: present
    autoconnect: yes
  when: enable_wan_interface|bool and configure_wan_interface|bool and wan_network_type == "dhcp" and wan_dns == "manual"

- name: Set WAN Connection Method (Ansible nmcli module bug workaround)
  shell: "nmcli con mod wan-{{ wan_interface }} ipv4.method manual"
  when: enable_wan_interface|bool and configure_wan_interface|bool and wan_network_type == "static"

- name: Set WAN Connection Method (Ansible nmcli module bug workaround)
  shell: "nmcli con mod wan-{{ wan_interface }} ipv4.method auto"
  when: enable_wan_interface|bool and configure_wan_interface|bool and wan_network_type == "dhcp"

- name: Set DNS Manual Method (Ansible nmcli module bug workaround)
  shell: "nmcli con mod wan-{{ wan_interface }} ipv4.ignore-auto-dns yes"
  when: enable_wan_interface|bool and configure_wan_interface|bool and wan_dns == "manual"

- name: Set DNS Manual Method (Ansible nmcli module bug workaround)
  shell: "nmcli con mod wan-{{ wan_interface }} ipv4.ignore-auto-dns no"
  when: enable_wan_interface|bool and configure_wan_interface|bool and wan_dns == "auto"

#### LAN

- name: Check for existing LAN Connection
  stat:
    path: "/etc/sysconfig/network-scripts/ifcfg-lan-{{ lan_interface }}"
  register: lan_interface_check

- name: Create LAN Connection, manual DNS
  nmcli:
    conn_name: "lan-{{ lan_interface }}"
    ifname: "{{ lan_interface }}"
    type: ethernet
    ip4: "{{ lan_ip_address }}/{{ lan_cidr }}"
    gw4: "{{ lan_gateway }}"
    dns4: "{{ lan_dns_servers }}"
    state: present
    autoconnect: yes
  register: create_lan_connection
  until: create_lan_connection is not failed
  retries: 5
  when: enable_lan_interface|bool and configure_lan_interface|bool and lan_network_type == "static" and lan_dns == "manual" and not create_bridge_for_lan|bool

- name: Set LAN Connection Method (Ansible nmcli module bug workaround)
  shell: "nmcli con mod lan-{{ lan_interface }} ipv4.method manual"
  when: enable_lan_interface|bool and configure_lan_interface|bool and lan_network_type == "static" and not create_bridge_for_lan|bool

- name: Set LAN Connection Method (Ansible nmcli module bug workaround)
  shell: "nmcli con mod lan-{{ lan_interface }} ipv4.method auto"
  when: enable_lan_interface|bool and configure_lan_interface|bool and lan_network_type == "dhcp" and not create_bridge_for_lan|bool

- name: Set DNS Manual Method (Ansible nmcli module bug workaround)
  shell: "nmcli con mod lan-{{ lan_interface }} ipv4.ignore-auto-dns yes"
  when: enable_lan_interface|bool and configure_lan_interface|bool and lan_dns == "manual" and not create_bridge_for_lan|bool

- name: Check for existing LAN Bridge
  stat:
    path: "/etc/sysconfig/network-scripts/ifcfg-{{ lan_bridge_name }}"
  register: lan_bridge_interface_check

- name: Create LAN Bridge
  shell: "nmcli con add type bridge con-name {{ lan_bridge_name }} ifname {{ lan_bridge_name }}"
  when: not lan_bridge_interface_check.stat.exists

- name: Check for existing LAN Bridge Secondary
  stat:
    path: "/etc/sysconfig/network-scripts/ifcfg-lan-{{ lan_interface }}"
  register: lan_br_interface_check

- name: Add LAN Interface to Bridge
  shell: "nmcli con add type ethernet con-name lan-{{ lan_interface }} ifname {{ lan_interface }} master {{ lan_bridge_name }}"
  when: not lan_br_interface_check.stat.exists

- name: Configure LAN Bridge, static
  shell: 'nmcli con mod {{ lan_bridge_name }} ipv4.method manual ipv4.address "{{ lan_ip_address }}/{{ lan_cidr }}" ipv4.gateway "{{ lan_gateway }}" ipv4.dns "{{ '' ''.join(lan_dns_servers) }}" ipv4.dns-search {{ system_domain }}'
  when: enable_lan_interface|bool and configure_lan_interface|bool and lan_network_type == "static" and create_bridge_for_lan|bool

- name: Configure LAN Bridge, auto
  shell: "nmcli con mod {{ lan_bridge_name }} ipv4.method auto"
  when: enable_lan_interface|bool and configure_lan_interface|bool and lan_network_type == "dhcp" and create_bridge_for_lan|bool

#### OPT1

- name: Create OPT1 Connection, manual DNS
  nmcli:
    conn_name: "opt1-{{ opt1_interface }}"
    ifname: "{{ opt1_interface }}"
    type: ethernet
    ip4: "{{ opt1_ip_address }}/{{ opt1_cidr }}"
    gw4: "{{ opt1_gateway }}"
    dns4: "{{ opt1_dns_servers }}"
    state: present
    autoconnect: yes
  register: create_opt1_connection
  until: create_opt1_connection is not failed
  retries: 5
  when: enable_opt1_interface|bool and configure_opt1_interface|bool and opt1_network_type == "static"

- name: Set OPT1 Connection Method (Ansible nmcli module bug workaround)
  shell: "nmcli con mod opt1-{{ opt1_interface }} ipv4.method manual"
  when: enable_opt1_interface|bool and configure_opt1_interface|bool and opt1_network_type == "static"

- name: Set OPT1 Connection Method (Ansible nmcli module bug workaround)
  shell: "nmcli con mod opt1-{{ opt1_interface }} ipv4.method auto"
  when: enable_opt1_interface|bool and configure_opt1_interface|bool and opt1_network_type == "dhcp"

- name: Set DNS Manual Method (Ansible nmcli module bug workaround)
  shell: "nmcli con mod opt1-{{ opt1_interface }} ipv4.ignore-auto-dns yes"
  when: enable_opt1_interface|bool and configure_opt1_interface|bool and opt1_dns == "manual"

#### OPT2

- name: Create OPT2 Connection
  nmcli:
    conn_name: "opt2-{{ opt2_interface }}"
    ifname: "{{ opt2_interface }}"
    type: ethernet
    ip4: "{{ opt2_ip_address }}/{{ opt2_cidr }}"
    gw4: "{{ opt2_gateway }}"
    dns4: "{{ opt2_dns_servers }}"
    state: present
    autoconnect: yes
  register: create_opt2_connection
  until: create_opt2_connection is not failed
  retries: 5
  when: enable_opt2_interface|bool and configure_opt2_interface|bool and opt2_network_type == "static"

- name: Set OPT2 Connection Method (Ansible nmcli module bug workaround)
  shell: "nmcli con mod opt2-{{ opt2_interface }} ipv4.method manual"
  when: enable_opt2_interface|bool and configure_opt2_interface|bool and opt2_network_type == "static"

- name: Set OPT2 Connection Method (Ansible nmcli module bug workaround)
  shell: "nmcli con mod opt2-{{ opt2_interface }} ipv4.method auto"
  when: enable_opt2_interface|bool and configure_opt2_interface|bool and opt2_network_type == "dhcp"

- name: Set DNS Manual Method (Ansible nmcli module bug workaround)
  shell: "nmcli con mod opt2-{{ opt2_interface }} ipv4.ignore-auto-dns yes"
  when: enable_opt2_interface|bool and configure_opt2_interface|bool and opt2_dns == "manual"
